name: Unit Testing, Coverage Collection, Package, Release, Documentation and Publish

on: [ push ]

defaults:
  run:
    shell: bash

jobs:

  Params:
    uses: pyTooling/Actions/.github/workflows/Params.yml@dev
    with:
      name: pyEDAA.ProjectModel

  UnitTesting:
    uses: pyTooling/Actions/.github/workflows/UnitTesting.yml@dev
    with:
      TestReport: true

  Coverage:
    uses: pyTooling/Actions/.github/workflows/CoverageCollection.yml@dev
    needs:
      - Params
    with:
      pyver: ${{ fromJson(needs.Params.outputs.params).pyver }}
      artifact: ${{ fromJson(needs.Params.outputs.params).artifacts.coverage }}
    secrets:
      codacy_token: ${{ secrets.CODACY_PROJECT_TOKEN }}

  StaticTypeCheck:
    uses: pyTooling/Actions/.github/workflows/StaticTypeCheck.yml@dev
    needs:
      - Params
    with:
      package: ${{ fromJson(needs.Params.outputs.params).package }}
      pyver: ${{ fromJson(needs.Params.outputs.params).pyver }}
      artifact: ${{ fromJson(needs.Params.outputs.params).artifacts.typing }}

  Release:
    uses: pyTooling/Actions/.github/workflows/Release.yml@dev
    if: startsWith(github.ref, 'refs/tags')
    needs:
      - UnitTesting
      - Coverage
      - StaticTypeCheck

  Package:
    uses: pyTooling/Actions/.github/workflows/Package.yml@dev
    if: startsWith(github.ref, 'refs/tags')
    needs:
      - Params
      - Coverage
    with:
      pyver: ${{ fromJson(needs.Params.outputs.params).pyver }}
      artifact: ${{ fromJson(needs.Params.outputs.params).artifacts.wheel }}

  PublishOnPyPI:
    uses: pyTooling/Actions/.github/workflows/PublishOnPyPI.yml@dev
    if: startsWith(github.ref, 'refs/tags')
    needs:
      - Params
      - Release
      - Package
    with:
      pyver: ${{ fromJson(needs.Params.outputs.params).pyver }}
      artifact: ${{ fromJson(needs.Params.outputs.params).artifacts.wheel }}
    secrets:
      PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}

  VerifyDocs:
    uses: pyTooling/Actions/.github/workflows/VerifyDocs.yml@dev
    needs:
      - Params
    with:
      pyver: ${{ fromJson(needs.Params.outputs.params).pyver }}

  BuildTheDocs:
    name: 📓 Run BuildTheDocs
    runs-on: ubuntu-latest
    needs:
      - VerifyDocs

    env:
      ARTIFACT: pyEDAA-ProjectModel-documentation
    outputs:
      artifact: ${{ env.ARTIFACT }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: 🚢 Build container image 'vhdl/doc'
        run: |
          docker build -t edaa/doc - <<-EOF
          FROM btdi/sphinx:featured
          RUN apk add -U --no-cache graphviz
          EOF

      - name: 🛳️ Build documentation using container edaa/doc
        uses: buildthedocs/btd@v0
        with:
          skip-deploy: true

      - name: 📤 Upload 'documentation' artifacts
        uses: actions/upload-artifact@master
        with:
          name: ${{ env.ARTIFACT }}
          path: doc/_build/html
          retention-days: 7

  PublishToGitHubPages:
    name: 📚 Publish to GH-Pages
    runs-on: ubuntu-latest
    needs:
      - BuildTheDocs
      - Coverage
      - StaticTypeCheck

    env:
      DOC:      ${{ needs.BuildTheDocs.outputs.artifact }}
      COVERAGE: ${{ needs.Coverage.outputs.artifact }}
      TYPING:   ${{ needs.StaticTypeCheck.outputs.artifact }}
    outputs:
      artifact: ${{ env.ARTIFACT }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: 📥 Download artifacts '${{ env.DOC }}' from 'BuildTheDocs' job
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.DOC }}
          path: public

      - name: 📥 Download artifacts '${{ env.COVERAGE }}' from 'Coverage' job
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.COVERAGE }}
          path: public/coverage

      - name: 📥 Download artifacts '${{ env.TYPING }}' from 'StaticTypeCheck' job
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.TYPING }}
          path: public/typing

      - name: '📓 Publish site to GitHub Pages'
        if: github.event_name != 'pull_request'
        run: |
          cd public
          touch .nojekyll
          git init
          cp ../.git/config ./.git/config
          git add .
          git config --local user.email "BuildTheDocs@GitHubActions"
          git config --local user.name "GitHub Actions"
          git commit -a -m "update ${{ github.sha }}"
          git push -u origin +HEAD:gh-pages

  ArtifactCleanUp:
    name: 🗑️ Artifact Cleanup
    runs-on: ubuntu-latest
    needs:
      - Coverage
      - StaticTypeCheck
      - BuildTheDocs
      - PublishToGitHubPages

    env:
      COVERAGE: ${{ needs.Coverage.outputs.artifact }}
      TYPING:   ${{ needs.StaticTypeCheck.outputs.artifact }}
      DOC:      ${{ needs.BuildTheDocs.outputs.artifact }}

    steps:
      - name: 🗑️ Delete all Artifacts
        uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            ${{ env.COVERAGE }}
            ${{ env.TYPING }}
            ${{ env.DOC }}
