name: Unit Testing, Coverage Collection, Package, Release, Documentation and Publish

on: [ push ]

defaults:
  run:
    shell: bash

jobs:

  Params:
    uses: pyTooling/Actions/.github/workflows/Params.yml@dev
    with:
      name: pyEDAA.ProjectModel

  UnitTesting:
    uses: pyTooling/Actions/.github/workflows/UnitTesting.yml@dev
    with:
      TestReport: true

  Coverage:
    uses: pyTooling/Actions/.github/workflows/CoverageCollection.yml@dev
    needs:
      - Params
    with:
      pyver: ${{ fromJson(needs.Params.outputs.params).pyver }}
      artifact: ${{ fromJson(needs.Params.outputs.params).artifacts.coverage }}
    secrets:
      codacy_token: ${{ secrets.CODACY_PROJECT_TOKEN }}

  StaticTypeCheck:
    uses: pyTooling/Actions/.github/workflows/StaticTypeCheck.yml@dev
    needs:
      - Params
    with:
      package: ${{ fromJson(needs.Params.outputs.params).package }}
      pyver: ${{ fromJson(needs.Params.outputs.params).pyver }}
      artifact: ${{ fromJson(needs.Params.outputs.params).artifacts.typing }}

  Release:
    uses: pyTooling/Actions/.github/workflows/Release.yml@dev
    if: startsWith(github.ref, 'refs/tags')
    needs:
      - UnitTesting
      - Coverage
      - StaticTypeCheck

  Package:
    uses: pyTooling/Actions/.github/workflows/Package.yml@dev
    if: startsWith(github.ref, 'refs/tags')
    needs:
      - Params
      - Coverage
    with:
      pyver: ${{ fromJson(needs.Params.outputs.params).pyver }}
      artifact: ${{ fromJson(needs.Params.outputs.params).artifacts.wheel }}

  PublishOnPyPI:
    name: üöÄ Publish to PyPI
    runs-on: ubuntu-latest

    if: startsWith(github.ref, 'refs/tags')
    needs:
      - Release
      - Package

    env:
      PYTHON:   ${{ needs.Package.outputs.python }}
      ARTIFACT: ${{ needs.Package.outputs.artifact }}
    outputs:
      python:   ${{ env.PYTHON }}
      artifact: ${{ env.ARTIFACT }}

    steps:
      - name: üì• Download artifacts '${{ env.ARTIFACT }}' from 'Package' job
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.ARTIFACT }}
          path: dist/

      - name: üêç Setup Python ${{ env.PYTHON }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON }}

      - name: ‚öô Install dependencies for packaging and release
        run: |
          python -m pip install --upgrade pip
          pip install wheel twine

      - name: ‚§¥ Release Python package to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          twine upload dist/*

      - name: üóëÔ∏è Delete packaging Artifacts
        uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            ${{ env.ARTIFACT }}

  VerifyDocs:
    name: üëç Verify example snippets using Python 3.10
    runs-on: ubuntu-latest

    env:
      PYTHON: "3.10"
    outputs:
      python: ${{ env.PYTHON }}

    steps:
      - name: ‚è¨ Checkout repository
        uses: actions/checkout@v2

      - name: üêç Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON }}

      - name: üêç Install dependencies
        run: |
          pip3 install .

      - name: ‚úÇ Extract code snippet from README
        shell: python
        run: |
          from pathlib import Path
          import re

          ROOT = Path('.')

          with (ROOT / 'README.md').open('r') as rptr:
              content = rptr.read()

          m = re.search(r"```py(thon)?(?P<code>.*?)```", content, re.MULTILINE|re.DOTALL)

          if m is None:
              raise Exception("Regular expression did not find the example in the README!")

          with (ROOT / 'tests/docs/example.py').open('w') as wptr:
              wptr.write(m["code"])

      - name: Print example.py
        run: cat tests/docs/example.py

      - name: ‚òë Run example snippet
        working-directory: tests/docs
        run: |
          python3 example.py

  BuildTheDocs:
    name: üìì Run BuildTheDocs
    runs-on: ubuntu-latest
    needs:
      - VerifyDocs

    env:
      ARTIFACT: pyEDAA-ProjectModel-documentation
    outputs:
      artifact: ${{ env.ARTIFACT }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: üö¢ Build container image 'vhdl/doc'
        run: |
          docker build -t edaa/doc - <<-EOF
          FROM btdi/sphinx:featured
          RUN apk add -U --no-cache graphviz
          EOF

      - name: üõ≥Ô∏è Build documentation using container edaa/doc
        uses: buildthedocs/btd@v0
        with:
          skip-deploy: true

      - name: üì§ Upload 'documentation' artifacts
        uses: actions/upload-artifact@master
        with:
          name: ${{ env.ARTIFACT }}
          path: doc/_build/html
          retention-days: 7

  PublishToGitHubPages:
    name: üìö Publish to GH-Pages
    runs-on: ubuntu-latest
    needs:
      - BuildTheDocs
      - Coverage
      - StaticTypeCheck

    env:
      DOC:      ${{ needs.BuildTheDocs.outputs.artifact }}
      COVERAGE: ${{ needs.Coverage.outputs.artifact }}
      TYPING:   ${{ needs.StaticTypeCheck.outputs.artifact }}
    outputs:
      artifact: ${{ env.ARTIFACT }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: üì• Download artifacts '${{ env.DOC }}' from 'BuildTheDocs' job
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.DOC }}
          path: public

      - name: üì• Download artifacts '${{ env.COVERAGE }}' from 'Coverage' job
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.COVERAGE }}
          path: public/coverage

      - name: üì• Download artifacts '${{ env.TYPING }}' from 'StaticTypeCheck' job
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.TYPING }}
          path: public/typing

      - name: 'üìì Publish site to GitHub Pages'
        if: github.event_name != 'pull_request'
        run: |
          cd public
          touch .nojekyll
          git init
          cp ../.git/config ./.git/config
          git add .
          git config --local user.email "BuildTheDocs@GitHubActions"
          git config --local user.name "GitHub Actions"
          git commit -a -m "update ${{ github.sha }}"
          git push -u origin +HEAD:gh-pages

  ArtifactCleanUp:
    name: üóëÔ∏è Artifact Cleanup
    runs-on: ubuntu-latest
    needs:
      - Coverage
      - StaticTypeCheck
      - BuildTheDocs
      - PublishToGitHubPages

    env:
      COVERAGE: ${{ needs.Coverage.outputs.artifact }}
      TYPING:   ${{ needs.StaticTypeCheck.outputs.artifact }}
      DOC:      ${{ needs.BuildTheDocs.outputs.artifact }}

    steps:
      - name: üóëÔ∏è Delete all Artifacts
        uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            ${{ env.COVERAGE }}
            ${{ env.TYPING }}
            ${{ env.DOC }}
